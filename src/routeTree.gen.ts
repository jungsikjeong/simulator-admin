/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as Game2IndexImport } from './routes/game2/index'
import { Route as Game1IndexImport } from './routes/game1/index'
import { Route as AuthSigninIndexImport } from './routes/auth/signin/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const Game2IndexRoute = Game2IndexImport.update({
  id: '/game2/',
  path: '/game2/',
  getParentRoute: () => rootRoute,
} as any)

const Game1IndexRoute = Game1IndexImport.update({
  id: '/game1/',
  path: '/game1/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSigninIndexRoute = AuthSigninIndexImport.update({
  id: '/auth/signin/',
  path: '/auth/signin/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/game1/': {
      id: '/game1/'
      path: '/game1'
      fullPath: '/game1'
      preLoaderRoute: typeof Game1IndexImport
      parentRoute: typeof rootRoute
    }
    '/game2/': {
      id: '/game2/'
      path: '/game2'
      fullPath: '/game2'
      preLoaderRoute: typeof Game2IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/signin/': {
      id: '/auth/signin/'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game1': typeof Game1IndexRoute
  '/game2': typeof Game2IndexRoute
  '/auth/signin': typeof AuthSigninIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game1': typeof Game1IndexRoute
  '/game2': typeof Game2IndexRoute
  '/auth/signin': typeof AuthSigninIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/game1/': typeof Game1IndexRoute
  '/game2/': typeof Game2IndexRoute
  '/auth/signin/': typeof AuthSigninIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game1' | '/game2' | '/auth/signin'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game1' | '/game2' | '/auth/signin'
  id: '__root__' | '/' | '/game1/' | '/game2/' | '/auth/signin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Game1IndexRoute: typeof Game1IndexRoute
  Game2IndexRoute: typeof Game2IndexRoute
  AuthSigninIndexRoute: typeof AuthSigninIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Game1IndexRoute: Game1IndexRoute,
  Game2IndexRoute: Game2IndexRoute,
  AuthSigninIndexRoute: AuthSigninIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game1/",
        "/game2/",
        "/auth/signin/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/game1/": {
      "filePath": "game1/index.tsx"
    },
    "/game2/": {
      "filePath": "game2/index.tsx"
    },
    "/auth/signin/": {
      "filePath": "auth/signin/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
